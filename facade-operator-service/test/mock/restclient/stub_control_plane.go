// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/restclient/control_plane.go
//
// Generated by this command:
//
//	mockgen -source=../../pkg/restclient/control_plane.go -destination=./restclient/stub_control_plane.go -package=mock_restclient
//

// Package mock_restclient is a generated GoMock package.
package mock_restclient

import (
	context "context"
	reflect "reflect"

	facade "github.com/netcracker/qubership-core-facade-operator/facade-operator-service/v2/api/facade"
	gomock "go.uber.org/mock/gomock"
)

// MockControlPlaneClient is a mock of ControlPlaneClient interface.
type MockControlPlaneClient struct {
	ctrl     *gomock.Controller
	recorder *MockControlPlaneClientMockRecorder
	isgomock struct{}
}

// MockControlPlaneClientMockRecorder is the mock recorder for MockControlPlaneClient.
type MockControlPlaneClientMockRecorder struct {
	mock *MockControlPlaneClient
}

// NewMockControlPlaneClient creates a new mock instance.
func NewMockControlPlaneClient(ctrl *gomock.Controller) *MockControlPlaneClient {
	mock := &MockControlPlaneClient{ctrl: ctrl}
	mock.recorder = &MockControlPlaneClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlPlaneClient) EXPECT() *MockControlPlaneClientMockRecorder {
	return m.recorder
}

// DropGateway mocks base method.
func (m *MockControlPlaneClient) DropGateway(ctx context.Context, gatewayServiceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropGateway", ctx, gatewayServiceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropGateway indicates an expected call of DropGateway.
func (mr *MockControlPlaneClientMockRecorder) DropGateway(ctx, gatewayServiceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropGateway", reflect.TypeOf((*MockControlPlaneClient)(nil).DropGateway), ctx, gatewayServiceName)
}

// RegisterGateway mocks base method.
func (m *MockControlPlaneClient) RegisterGateway(ctx context.Context, gatewayServiceName string, cr facade.MeshGateway) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGateway", ctx, gatewayServiceName, cr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterGateway indicates an expected call of RegisterGateway.
func (mr *MockControlPlaneClientMockRecorder) RegisterGateway(ctx, gatewayServiceName, cr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGateway", reflect.TypeOf((*MockControlPlaneClient)(nil).RegisterGateway), ctx, gatewayServiceName, cr)
}
