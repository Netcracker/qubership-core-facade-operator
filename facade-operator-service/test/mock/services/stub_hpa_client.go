// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/services/hpa_client.go
//
// Generated by this command:
//
//	mockgen -source=../../pkg/services/hpa_client.go -destination=./services/stub_hpa_client.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v2 "k8s.io/api/autoscaling/v2"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockHPAClient is a mock of HPAClient interface.
type MockHPAClient struct {
	ctrl     *gomock.Controller
	recorder *MockHPAClientMockRecorder
	isgomock struct{}
}

// MockHPAClientMockRecorder is the mock recorder for MockHPAClient.
type MockHPAClientMockRecorder struct {
	mock *MockHPAClient
}

// NewMockHPAClient creates a new mock instance.
func NewMockHPAClient(ctrl *gomock.Controller) *MockHPAClient {
	mock := &MockHPAClient{ctrl: ctrl}
	mock.recorder = &MockHPAClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHPAClient) EXPECT() *MockHPAClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHPAClient) Create(ctx context.Context, req controllerruntime.Request, hpa *v2.HorizontalPodAutoscaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req, hpa)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHPAClientMockRecorder) Create(ctx, req, hpa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHPAClient)(nil).Create), ctx, req, hpa)
}

// Delete mocks base method.
func (m *MockHPAClient) Delete(ctx context.Context, req controllerruntime.Request, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHPAClientMockRecorder) Delete(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHPAClient)(nil).Delete), ctx, req, name)
}
