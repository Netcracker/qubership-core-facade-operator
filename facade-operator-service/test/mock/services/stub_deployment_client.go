// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/services/deployment_client.go
//
// Generated by this command:
//
//	mockgen -source=../../pkg/services/deployment_client.go -destination=./services/stub_deployment_client.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	utils "github.com/netcracker/qubership-core-facade-operator/pkg/utils"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockDeploymentClient is a mock of DeploymentClient interface.
type MockDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentClientMockRecorder
	isgomock struct{}
}

// MockDeploymentClientMockRecorder is the mock recorder for MockDeploymentClient.
type MockDeploymentClientMockRecorder struct {
	mock *MockDeploymentClient
}

// NewMockDeploymentClient creates a new mock instance.
func NewMockDeploymentClient(ctrl *gomock.Controller) *MockDeploymentClient {
	mock := &MockDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentClient) EXPECT() *MockDeploymentClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockDeploymentClient) Apply(ctx context.Context, req controllerruntime.Request, newDeployment *v1.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, req, newDeployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockDeploymentClientMockRecorder) Apply(ctx, req, newDeployment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDeploymentClient)(nil).Apply), ctx, req, newDeployment)
}

// Delete mocks base method.
func (m *MockDeploymentClient) Delete(ctx context.Context, req controllerruntime.Request, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeploymentClientMockRecorder) Delete(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeploymentClient)(nil).Delete), ctx, req, name)
}

// DeleteMasterCRLabel mocks base method.
func (m *MockDeploymentClient) DeleteMasterCRLabel(ctx context.Context, req controllerruntime.Request, deploymentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMasterCRLabel", ctx, req, deploymentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMasterCRLabel indicates an expected call of DeleteMasterCRLabel.
func (mr *MockDeploymentClientMockRecorder) DeleteMasterCRLabel(ctx, req, deploymentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMasterCRLabel", reflect.TypeOf((*MockDeploymentClient)(nil).DeleteMasterCRLabel), ctx, req, deploymentName)
}

// Get mocks base method.
func (m *MockDeploymentClient) Get(ctx context.Context, req controllerruntime.Request, name string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req, name)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeploymentClientMockRecorder) Get(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeploymentClient)(nil).Get), ctx, req, name)
}

// GetMasterCR mocks base method.
func (m *MockDeploymentClient) GetMasterCR(ctx context.Context, req controllerruntime.Request, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterCR", ctx, req, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterCR indicates an expected call of GetMasterCR.
func (mr *MockDeploymentClientMockRecorder) GetMasterCR(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterCR", reflect.TypeOf((*MockDeploymentClient)(nil).GetMasterCR), ctx, req, name)
}

// GetMeshRouterDeployments mocks base method.
func (m *MockDeploymentClient) GetMeshRouterDeployments(ctx context.Context, req controllerruntime.Request) (*v1.DeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshRouterDeployments", ctx, req)
	ret0, _ := ret[0].(*v1.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshRouterDeployments indicates an expected call of GetMeshRouterDeployments.
func (mr *MockDeploymentClientMockRecorder) GetMeshRouterDeployments(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshRouterDeployments", reflect.TypeOf((*MockDeploymentClient)(nil).GetMeshRouterDeployments), ctx, req)
}

// IsFacadeGateway mocks base method.
func (m *MockDeploymentClient) IsFacadeGateway(ctx context.Context, req controllerruntime.Request, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFacadeGateway", ctx, req, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFacadeGateway indicates an expected call of IsFacadeGateway.
func (mr *MockDeploymentClientMockRecorder) IsFacadeGateway(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFacadeGateway", reflect.TypeOf((*MockDeploymentClient)(nil).IsFacadeGateway), ctx, req, name)
}

// SetLastAppliedCR mocks base method.
func (m *MockDeploymentClient) SetLastAppliedCR(ctx context.Context, req controllerruntime.Request, deploymentName string, lastAppliedCr *utils.LastAppliedCr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastAppliedCR", ctx, req, deploymentName, lastAppliedCr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastAppliedCR indicates an expected call of SetLastAppliedCR.
func (mr *MockDeploymentClientMockRecorder) SetLastAppliedCR(ctx, req, deploymentName, lastAppliedCr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastAppliedCR", reflect.TypeOf((*MockDeploymentClient)(nil).SetLastAppliedCR), ctx, req, deploymentName, lastAppliedCr)
}
