// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/services/ready_service.go
//
// Generated by this command:
//
//	mockgen -source=../../pkg/services/ready_service.go -destination=./services/stub_ready_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	facade "github.com/netcracker/qubership-core-facade-operator/facade-operator-service/v2/api/facade"
	gomock "go.uber.org/mock/gomock"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockReadyService is a mock of ReadyService interface.
type MockReadyService struct {
	ctrl     *gomock.Controller
	recorder *MockReadyServiceMockRecorder
	isgomock struct{}
}

// MockReadyServiceMockRecorder is the mock recorder for MockReadyService.
type MockReadyServiceMockRecorder struct {
	mock *MockReadyService
}

// NewMockReadyService creates a new mock instance.
func NewMockReadyService(ctrl *gomock.Controller) *MockReadyService {
	mock := &MockReadyService{ctrl: ctrl}
	mock.recorder = &MockReadyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadyService) EXPECT() *MockReadyServiceMockRecorder {
	return m.recorder
}

// CheckDeploymentReady mocks base method.
func (m *MockReadyService) CheckDeploymentReady(ctx context.Context, req controllerruntime.Request, cr facade.MeshGateway) (controllerruntime.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDeploymentReady", ctx, req, cr)
	ret0, _ := ret[0].(controllerruntime.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDeploymentReady indicates an expected call of CheckDeploymentReady.
func (mr *MockReadyServiceMockRecorder) CheckDeploymentReady(ctx, req, cr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDeploymentReady", reflect.TypeOf((*MockReadyService)(nil).CheckDeploymentReady), ctx, req, cr)
}

// IsUpdatingPhase mocks base method.
func (m *MockReadyService) IsUpdatingPhase(ctx context.Context, req controllerruntime.Request, cr facade.MeshGateway) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpdatingPhase", ctx, req, cr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUpdatingPhase indicates an expected call of IsUpdatingPhase.
func (mr *MockReadyServiceMockRecorder) IsUpdatingPhase(ctx, req, cr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpdatingPhase", reflect.TypeOf((*MockReadyService)(nil).IsUpdatingPhase), ctx, req, cr)
}
