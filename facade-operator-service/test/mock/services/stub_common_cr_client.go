// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/services/common_cr_client.go
//
// Generated by this command:
//
//	mockgen -source=../../pkg/services/common_cr_client.go -destination=./services/stub_common_cr_client.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	facade "github.com/netcracker/qubership-core-facade-operator/facade-operator-service/v2/api/facade"
	utils "github.com/netcracker/qubership-core-facade-operator/facade-operator-service/v2/pkg/utils"
	gomock "go.uber.org/mock/gomock"
	controllerruntime "sigs.k8s.io/controller-runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockCommonCRClient is a mock of CommonCRClient interface.
type MockCommonCRClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommonCRClientMockRecorder
	isgomock struct{}
}

// MockCommonCRClientMockRecorder is the mock recorder for MockCommonCRClient.
type MockCommonCRClientMockRecorder struct {
	mock *MockCommonCRClient
}

// NewMockCommonCRClient creates a new mock instance.
func NewMockCommonCRClient(ctrl *gomock.Controller) *MockCommonCRClient {
	mock := &MockCommonCRClient{ctrl: ctrl}
	mock.recorder = &MockCommonCRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonCRClient) EXPECT() *MockCommonCRClientMockRecorder {
	return m.recorder
}

// FindByFields mocks base method.
func (m *MockCommonCRClient) FindByFields(ctx context.Context, req controllerruntime.Request, fields client.MatchingFields) ([]facade.MeshGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFields", ctx, req, fields)
	ret0, _ := ret[0].([]facade.MeshGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFields indicates an expected call of FindByFields.
func (mr *MockCommonCRClientMockRecorder) FindByFields(ctx, req, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFields", reflect.TypeOf((*MockCommonCRClient)(nil).FindByFields), ctx, req, fields)
}

// FindByNames mocks base method.
func (m *MockCommonCRClient) FindByNames(ctx context.Context, req controllerruntime.Request, names []string) ([]facade.MeshGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNames", ctx, req, names)
	ret0, _ := ret[0].([]facade.MeshGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNames indicates an expected call of FindByNames.
func (mr *MockCommonCRClientMockRecorder) FindByNames(ctx, req, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNames", reflect.TypeOf((*MockCommonCRClient)(nil).FindByNames), ctx, req, names)
}

// GetAll mocks base method.
func (m *MockCommonCRClient) GetAll(ctx context.Context, req controllerruntime.Request) ([]facade.MeshGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, req)
	ret0, _ := ret[0].([]facade.MeshGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCommonCRClientMockRecorder) GetAll(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCommonCRClient)(nil).GetAll), ctx, req)
}

// GetByLastAppliedCr mocks base method.
func (m *MockCommonCRClient) GetByLastAppliedCr(ctx context.Context, req controllerruntime.Request, lastCr *utils.LastAppliedCr) (facade.MeshGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLastAppliedCr", ctx, req, lastCr)
	ret0, _ := ret[0].(facade.MeshGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLastAppliedCr indicates an expected call of GetByLastAppliedCr.
func (mr *MockCommonCRClientMockRecorder) GetByLastAppliedCr(ctx, req, lastCr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLastAppliedCr", reflect.TypeOf((*MockCommonCRClient)(nil).GetByLastAppliedCr), ctx, req, lastCr)
}

// IsCRExistByName mocks base method.
func (m *MockCommonCRClient) IsCRExistByName(ctx context.Context, req controllerruntime.Request, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCRExistByName", ctx, req, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCRExistByName indicates an expected call of IsCRExistByName.
func (mr *MockCommonCRClientMockRecorder) IsCRExistByName(ctx, req, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCRExistByName", reflect.TypeOf((*MockCommonCRClient)(nil).IsCRExistByName), ctx, req, name)
}
